
/*
 * Copyright (C) Xiaozhe Wang (chaoslawful)
 * Copyright (C) Yichun Zhang (agentzh)
 */


#ifndef DDEBUG
#define DDEBUG 0
#endif
#include "ddebug.h"


#include "ngx_[% subsystem %]_lua_time.h"
#include "ngx_[% subsystem %]_lua_util.h"


static int ngx_[% subsystem %]_lua_ngx_cookie_time(lua_State *L);
static int ngx_[% subsystem %]_lua_ngx_http_time(lua_State *L);
static int ngx_[% subsystem %]_lua_ngx_parse_http_time(lua_State *L);


static int
ngx_[% subsystem %]_lua_ngx_cookie_time(lua_State *L)
{
    time_t                               t;
    u_char                              *p;

    u_char   buf[sizeof("Mon, 28 Sep 1970 06:00:00 GMT") - 1];

    if (lua_gettop(L) != 1) {
        return luaL_error(L, "expecting one argument");
    }

    t = (time_t) luaL_checknumber(L, 1);

    p = buf;
    p = ngx_http_cookie_time(p, t);

    lua_pushlstring(L, (char *) buf, p - buf);

    return 1;
}


static int
ngx_[% subsystem %]_lua_ngx_http_time(lua_State *L)
{
    time_t                               t;
    u_char                              *p;

    u_char   buf[sizeof("Mon, 28 Sep 1970 06:00:00 GMT") - 1];

    if (lua_gettop(L) != 1) {
        return luaL_error(L, "expecting one argument");
    }

    t = (time_t) luaL_checknumber(L, 1);

    p = buf;
    p = ngx_http_time(p, t);

    lua_pushlstring(L, (char *) buf, p - buf);

    return 1;
}


static int
ngx_[% subsystem %]_lua_ngx_parse_http_time(lua_State *L)
{
    u_char                              *p;
    size_t                               len;
    time_t                               time;

    if (lua_gettop(L) != 1) {
        return luaL_error(L, "expecting one argument");
    }

    p = (u_char *) luaL_checklstring(L, 1, &len);

    time = ngx_http_parse_time(p, len);
    if (time == NGX_ERROR) {
        lua_pushnil(L);
        return 1;
    }

    lua_pushnumber(L, (lua_Number) time);

    return 1;
}


void
ngx_[% subsystem %]_lua_inject_time_api(lua_State *L)
{
    ngx_meta_lua_inject_time_api(L);

    lua_pushcfunction(L, ngx_[% subsystem %]_lua_ngx_cookie_time);
    lua_setfield(L, -2, "cookie_time");

    lua_pushcfunction(L, ngx_[% subsystem %]_lua_ngx_http_time);
    lua_setfield(L, -2, "http_time");

    lua_pushcfunction(L, ngx_[% subsystem %]_lua_ngx_parse_http_time);
    lua_setfield(L, -2, "parse_http_time");
}


#ifndef NGX_LUA_NO_FFI_API
double
ngx_[% subsystem %]_lua_ffi_now(void)
{
    ngx_time_t              *tp;

    tp = ngx_timeofday();

    return tp->sec + tp->msec / 1000.0;
}


double
ngx_[% subsystem %]_lua_ffi_req_start_time([% subsystem_req_t %] *r)
{
    return r->start_sec + r->start_msec / 1000.0;
}


long
ngx_[% subsystem %]_lua_ffi_time(void)
{
    return (long) ngx_time();
}
#endif /* NGX_LUA_NO_FFI_API */


/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
